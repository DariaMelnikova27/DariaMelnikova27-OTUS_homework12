{"name": "Переключение валют из верхнего меню опенкарта", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: create container: Error response from daemon: No such image: selenoid/firefox:108.0", "trace": "request = <SubRequest 'browser' for <Function test_currency_switching[USD]>>\n\n    @pytest.fixture\n    def browser(request):\n        browser = request.config.getoption(\"--browser\")\n        executor = request.config.getoption(\"--executor\")\n        version = request.config.getoption(\"--bv\")\n        vnc = request.config.getoption(\"--vnc\")\n        logs = request.config.getoption(\"--logs\")\n        video = request.config.getoption(\"--video\")\n        driver_folder = request.config.getoption(\"--driver_folder\")\n        url = request.config.getoption(\"--url\")\n    \n        if executor == \"local\":\n    \n            if browser == 'firefox' or browser == \"ff\":\n                options = FirefoxOptions()\n                driver = webdriver.Firefox(\n                    executable_path=f\"{driver_folder}{os.sep}geckodriver\", options=options\n                )\n            elif browser == \"chrome\":\n                options = ChromeOptions()\n                driver = webdriver.Chrome(\n                    options=options, executable_path=f\"{driver_folder}{os.sep}chromedriver\"\n                )\n            elif browser == \"edge\":\n                options = EdgeOptions()\n                driver = webdriver.Edge(\n                    executable_path=f\"{driver_folder}{os.sep}msedgedriver\", options=options\n                )\n            elif browser == \"yandex\":\n                options = ChromeOptions()\n                driver = webdriver.Chrome(\n                    executable_path=f\"{driver_folder}{os.sep}yandexdriver\", options=options\n                )\n            elif browser == \"safari\":\n                driver = webdriver.Safari()\n    \n            driver.maximize_window()\n            request.addfinalizer(driver.close)\n            driver.get(url)\n            driver.url = url\n            return driver\n    \n        else:\n            executor_url = f\"http://{executor}:4444/wd/hub\"\n    \n            caps = {\n                \"browserName\": browser,\n                \"browserVersion\": version,\n                \"selenoid:options\": {\n                    \"screenResolution\": \"1280x720\",\n                    \"name\": \"Daria\",\n                    \"enableVNC\": vnc,\n                    \"enableVideo\": video,\n                    \"enableLog\": logs\n                },\n                'timeZone': 'Europe/Moscow',\n            }\n    \n>           driver = webdriver.Remote(\n                command_executor=executor_url,\n                desired_capabilities=caps\n            )\n\nconftest.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:381: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd4e82db2b0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Error response from daemon: No such image: selenoid/firefox:108.0\"}}\\n'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: create container: Error response from daemon: No such image: selenoid/firefox:108.0\n\n../../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:249: SessionNotCreatedException"}, "parameters": [{"name": "currency", "value": "'USD'"}], "start": 1677581440642, "stop": 1677581440642, "uuid": "c01fa3ae-02c7-4be2-b694-b2bb1ed82728", "historyId": "b04e09ebf045cbae802abf954b226b9a", "testCaseId": "98de162a729348d871b8a28b3a8995eb", "fullName": "tests.test_general_page#test_currency_switching", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Действия на главной странице"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_general_page"}, {"name": "host", "value": "users-MacBook-Air.local"}, {"name": "thread", "value": "4077-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_general_page"}]}